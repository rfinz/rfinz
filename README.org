* rfinz.me
( the website )

** Content

How content becomes website.

*** Writing

Original documents are in =org/_posts= and get rendered into =jekyll/_posts=. The code for doing that is in my [[https://github.com/rfinz/dotfiles/blob/9b3aba86a499f4fe6ffeebb5e57a7e9e2540cffb/.emacs#L174-L207][.emacs]]. There' also a bit of code there for rendering the inter-post links that might be of interest.

Jekyll headers and any template code are enclosed in =#+BEGIN_EXPORT html= org tags so that they are rendered exactly in the resulting files. An example is [[https://github.com/rfinz/rfinz/blob/794990d9b15a96eee1ebc706115b209b1043476c/org/attempts/index.org#L1-L22][here]].

Much of the effort to get org working with jekyll relied on the tutorial [[https://orgmode.org/worg/org-tutorials/org-jekyll.html][here]].

*** Javascript Demos

Some javascript demos that I've coded over the years are included as git submodules. As long as the demo repos have a =index.html= simply adding the submodule (and including it in the jekyll directory structure) is enough to get a live version on the website. I've been manually updating the Demo landing page with the links.


** Jekyll

*** Plugins

In order to accomplish the github backlinks I scripted a tiny [[https://github.com/rfinz/rfinz/blob/master/jekyll/_plugins/jekyll-blob-aware.rb][plugin]] that runs a git command and injects it into a jekyll variable.

*** Theme

The theming is accomplished with the files that are in =jekyll/_includes=, =jekyll/_layouts=, and =jekyll/_sass=. The general structure of these were cribbed from the wonderful [[https://github.com/jekyll/minima][minima]].

I used a few top-level [[http://tachyons.io/][tachyons]] concepts to accomplish column widths and font sizes.

The font is [[http://www.gust.org.pl/projects/e-foundry/latin-modern][Latin Modern]] from GUST e-foundry.
